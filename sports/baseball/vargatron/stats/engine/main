#!/usr/bin/env ruby

inputdir  = ARGV[0]
outputdir = ARGV[1]

require 'rubygems'
require 'hackboxen'
require 'json'
require 'nokogiri'
options = JSON.parse(File.read(File.join(inputdir, "env", "working_config.json")))

puts "-"*80
$datasource = ""
$log= []

if options["debug"]
  puts "MAIN: In debug mode: only processing the Texas Rangers."
  $datasource=File.join(path_to(:rawd_dir),"debug")
else
  $datasource=File.join(path_to(:rawd_dir),"flatfiles")
end
$last_year=Dir[File.join(path_to(:rawd_dir),"standings","*")].sort[-1][-8..-5].to_i
log_file_loc = File.join(path_to(:log_dir),"log.txt")
FileUtils.mkdir_p(File.join(path_to(:fixd_dir),"data"))
$team_out = File.open(File.join(path_to(:fixd_dir),"data","team_stats.json"),'w')
$season_out = File.open(File.join(path_to(:fixd_dir),"data","season_stats.json"),'w')
$game_out = File.open(File.join(path_to(:fixd_dir),"data","game_stats.json"),'w')

if File.exists?(log_file_loc)
  #Load in the log file.
  $log_file=File.open(log_file_loc,'r')
  $log_file.each_line{ |l|
    $log.push(l.chomp) }
  $log_file.close
  $log_file=File.open(log_file_loc,'a')
else
  #Make the log file.
  $log_file=File.open(log_file_loc,'w')
  $log_file.puts("SEP.xml")
  $log.push("SEP.xml") #This is a bad file.
end

task :parse_team_files do
  Dir[File.join($datasource,"???.xml")].sort.each { |t_file|
    #The logs will need to be deleted or this modified for the 2011 data.
    next if $log.index(File.basename(t_file))
    #Process the team file and all of its season files.
    parse_team_file(t_file)
  }
  puts "Finished creating the team records."
end

#Processes all files associated with a team. 
def parse_team_file t_file
  x = Nokogiri::XML.parse(File.read(t_file))
  #The team file has most of the data for each season, but it doesn't have the list of game_ids. We'll need to pull each season file for that. While we're at it, we'll also pull the win-loss records for the team_record.
  #This data goes into both the team_record and season_records, so we might as well start off with it.
  team_record = {}
  team_record.store("team_id",x.xpath('/team/info/@teamID')[0].value)
  team_record.store("team_location",x.xpath('/team/info/@location')[0].value)
  team_record.store("team_name",x.xpath('/team/info/@name')[0].value)
  team_record.store("primary_color",x.xpath('/team/info/@primaryColorName')[0].value)
  team_record.store("secondary_color",x.xpath('/team/info/@secondaryColorName')[0].value)
  team_record.store("primary_color_hex",x.xpath('/team/info/@primaryColorHex')[0].value)
  team_record.store("secondary_color_hex",x.xpath('/team/info/@secondaryColorHex')[0].value)
  #Since some teams died before 2010, their most recent season might be old.
  last_game = Dir[File.join($datasource,team_record["team_id"]+"?????????.xml")].sort.last
  last_year = last_game[-13..-10].to_i
  #Then, get a list of all of the seasons, and write the season_record for each:
  year_records=[]
  x.xpath('/team/seasons').children.each{|y|
    season=y.xpath('./@year')[0].value.to_i
    year_records.push(Hash["season",season,
                           "wins",y.xpath('./teamStats/@W')[0].value.to_i,
                           "losses",y.xpath('./teamStats/@L')[0].value.to_i,
                           "division_series",y.xpath('./postSeasonSeriesWins/@DS')[0].value.to_i])
    #Division, league rank, and division rank all need to be pulled out of the standings file for this season.
    s = Nokogiri::XML.parse(File.read(File.join(path_to(:rawd_dir),"standings",season.to_s << ".xml")))
    #Divisions only exist from 1969 onward.
    if season>1968
      year_records.last.store("league_rank",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-2]["rank"].to_i)
      year_records.last.store("division_rank",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-1]["rank"].to_i)
      if season==last_year
        team_record.store("division",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-1].parent.name) 
        team_record.store("league",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-2].parent.parent.name)
      end
    else
      year_records.last.store("league_rank",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-1]["rank"].to_i)
      team_record.store("league",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-2].parent.parent.name) if season==last_year
    end
  }
  team_record.store("seasons",year_records)
  #The stadium is most conveniently stored in the game files. Pick the last game they hosted in the last year and pull it from there.
  g = Nokogiri::XML.parse(File.read(last_game))
  team_record.store("home_stadium",g.xpath('/gamedata/game/stadium/@name')[0].value)
  #Append the team_record to the file.
  $team_out.puts(team_record.to_json)
  #Finally, add the file to the log.
  $log_file.puts(File.basename(t_file))
  puts team_record["team_id"]
end

#Beforehand, this was part of parse_team_file because the season_record needs some things from the team file, and the game_record needs some things from the season file, everything associated with one team gets processed at once.
def parse_season_file s_file
    #Now, create the season_record if we haven't done this one.
    s_file=t_file.gsub(/\.xml\z/,year_records.last["season"].to_s<<".xml")
    next if $log.index(File.basename(s_file))
    season_record = {}
    season_record.merge!(team_record)
    season_record.store("season",y.xpath('./@year')[0].value.to_i)
    season_record.store("league",y.xpath('./@league')[0].value)
    y.xpath('./postSeasonSeriesWins')[0].attributes.each{|k,v|
      season_record.store(k,v.value.to_i)}
    y.xpath('./teamStats')[0].attributes.each{|k,v|
      #Warning: this will work so long as any of the averages and percentages contain a decimal place, which *should* be true for every number in the dataset.
      if (v.value.index('.'))
        season_record.store(k,v.value.to_f)
      else
        season_record.store(k,v.value.to_i)
      end
    }
    y.xpath('./leagueComparison')[0].attributes.each{|k,v|
      #These should all be floats, so no warning here.
      season_record.store("relative_"+k,v.value.to_f)
    }
    
    #Division, league rank, and division rank all need to be pulled out of the standings file for this season.
    s = Nokogiri::XML.parse(File.read(File.join(path_to(:rawd_dir),"standings",season_record["season"].to_s << ".xml")))
    #Divisions only exist from 1969 onward.
    if season_record["season"]>1968
      season_record.store("league_rank",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-2]["rank"].to_i)
      season_record.store("division_rank",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-1]["rank"].to_i)
      season_record.store("division",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-1].parent.name)
      year_records.last.store("division_rank",season_record["division_rank"])
    else
      season_record.store("league_rank",s.xpath("//team[contains(@id,'#{team_record["team_id"]}')]")[-1]["rank"].to_i)
    end
    year_records.last.store("league_rank",season_record["league_rank"])
    #Now all that's left for the season_record is pulling the list of game_ids from the season file.
    z = Nokogiri::XML.parse(File.read(s_file))
    s_game_records=[]
    p_game_records=[]
    z.xpath('/team/games')[0].children.each{ |w|
      game_id=w["id"]
      gr = Hash["game_date",game_id[3..-1],
                "game_type",w["homeaway"],
                "game_result",w.xpath('./results/@result')[0].value,
                "home_score",w.xpath('./results/@homescore')[0].value,
                "away_score",w.xpath('./results/@awayscore')[0].value,
                "opponent",w.xpath('./opponentinfo/@opponentid')[0].value]
      if game_id[-1]==48 #"0"[0]
        gr.store("double_header","false")
      else
        gr.store("double_header","true")
      end
      if w["playoffgame"]=="0"
        s_game_records.push(gr)
      else
        p_game_records.push(gr)
      end
      #Now is the best time to parse the game files, since we've got both the relevant season and standing fields open, in z and s.
      #Since each game file has two participants, only parse home games.
      g_file = File.join($datasource,game_id+".xml")
      if gr["game_type"]=="home" and !$log.index(File.basename(g_file))
        g = Nokogiri::XML.parse(File.read(g_file))
        game_record = {}
        game_record.store("game_id",game_id)
        game_record.store("date",g.xpath('/gamedata/game/@date')[0].value)
        game_record.store("day_of_the_week",g.xpath('/gamedata/game/@dayofweek')[0].value)
        game_record.store("attendance",g.xpath('/gamedata/game/@attendance')[0].value.to_i)
        game_record.store("location",g.xpath('/gamedata/game/stadium/@location')[0].value.gsub(/,([A-Z]{2})/,', \1'))
        #The start time needs to be processed.
        game_record.store("start_time",w["starttime"].insert(1,":") << " PM")
        #The stadium name needs to be processed.
        stadium=g.xpath('/gamedata/game/stadium/@name')[0].value.gsub(/ \(P.*\)/,'')
        city = game_record["location"].gsub(/, ?[A-Z]{2}/,'')
        stadium << " in " << city unless stadium.index(city)
        game_record.store("stadium",stadium)
        season_record.store("home_stadium",stadium) unless season_record["home_stadium"]
        #Process the home team's stats.
        home_record = {}
        home_record.store("team_id",g.xpath('/gamedata/game/home/info/@teamID')[0].value)
        home_record.store("team_name",g.xpath('/gamedata/game/home/info/@name')[0].value)
        home_record.store("team_location",g.xpath('/gamedata/game/home/info/@location')[0].value)
        #League rank and division rank both come from the standings file s.
        ranks=s.xpath("//day[contains(@date,'#{game_record['date']}')]//team[contains(@id,'#{home_record['team_id']}')]")
        if ranks[0]
          home_record.store("league_rank",ranks[0]["rank"].to_i)
          home_record.store("division_rank",ranks[1]["rank"].to_i) if ranks[1]
        else
          #This is a postseason game.
          if season_record["season"]>1968
            home_record.store("league_rank",s.xpath("//team[contains(@id,'#{home_record['team_id']}')]")[-2]["rank"].to_i)
            home_record.store("division_rank",s.xpath("//team[contains(@id,'#{home_record['team_id']}')]")[-1]["rank"].to_i)
          else
            home_record.store("league_rank",s.xpath("//team[contains(@id,'#{home_record['team_id']}')]")[-1]["rank"].to_i)
          end
        end
        home_record.store("runs",g.xpath('/gamedata/game/home/@runs')[0].value.to_i)
        home_record.store("hits",g.xpath('/gamedata/game/home/@hits')[0].value.to_i)
        home_record.store("errors",g.xpath('/gamedata/game/home/@errors')[0].value.to_i)
        home_record.store("left_on_base",g.xpath('/gamedata/game/home/@leftOnBase')[0].value.to_i)
        pitchers = []
        g.xpath('/gamedata/finalstats/home/pitching')[0].children.each{|p|
          pitchers.push(Hash["player_id",p["id"],
                             "first_name",p["firstname"],
                             "last_name",p["lastname"],
                             "batters_faced",p["battersFaced"].to_i,
                             "hits",p["hits"].to_i,
                             "walks",p["walks"].to_i,
                             "rbi",p["rbi"].to_i])}
        home_record.store("pitching",pitchers)
        batters = []
        g.xpath('/gamedata/finalstats/home/batting')[0].children.each{|p|
          batters.push(Hash["player_id",p["id"],
                            "first_name",p["firstname"],
                            "last_name",p["lastname"],
                            "at_bats",p["atbats"].to_i,
                            "hits",p["hits"].to_i,
                            "walks",p["walks"].to_i,
                            "rbi",p["rbi"].to_i])}
        home_record.store("batting",batters)
        game_record.store("home_team_stats",home_record)
        #Process the away team's stats.
        away_record = {}
        away_record.store("team_id",g.xpath('/gamedata/game/away/info/@teamID')[0].value)
        away_record.store("team_name",g.xpath('/gamedata/game/away/info/@name')[0].value)
        away_record.store("team_location",g.xpath('/gamedata/game/away/info/@location')[0].value)
        #League rank and division rank both come from the standings file s.
        ranks=s.xpath("//day[contains(@date,'#{game_record['date']}')]//team[contains(@id,'#{away_record['team_id']}')]")
        if ranks[0]
          away_record.store("league_rank",ranks[0]["rank"].to_i)
          away_record.store("division_rank",ranks[1]["rank"].to_i) if ranks[1]
        else
          #This is a postseason game.
          if season_record["season"]>1968
            away_record.store("league_rank",s.xpath("//team[contains(@id,'#{away_record['team_id']}')]")[-2]["rank"].to_i)
            away_record.store("division_rank",s.xpath("//team[contains(@id,'#{away_record['team_id']}')]")[-1]["rank"].to_i)
          else
            away_record.store("league_rank",s.xpath("//team[contains(@id,'#{away_record['team_id']}')]")[-1]["rank"].to_i)
          end
        end
        away_record.store("runs",g.xpath('/gamedata/game/away/@runs')[0].value.to_i)
        away_record.store("hits",g.xpath('/gamedata/game/away/@hits')[0].value.to_i)
        away_record.store("errors",g.xpath('/gamedata/game/away/@errors')[0].value.to_i)
        away_record.store("left_on_base",g.xpath('/gamedata/game/away/@leftOnBase')[0].value.to_i)
        pitchers = []
        g.xpath('/gamedata/finalstats/away/pitching')[0].children.each{|p|
          pitchers.push(Hash["player_id",p["id"],
                             "first_name",p["firstname"],
                             "last_name",p["lastname"],
                             "batters_faced",p["battersFaced"].to_i,
                             "hits",p["hits"].to_i,
                             "walks",p["walks"].to_i,
                             "rbi",p["rbi"].to_i])}
        away_record.store("pitching",pitchers)
        batters = []
        g.xpath('/gamedata/finalstats/away/batting')[0].children.each{|p|
          batters.push(Hash["player_id",p["id"],
                            "first_name",p["firstname"],
                            "last_name",p["lastname"],
                            "at_bats",p["atbats"].to_i,
                            "hits",p["hits"].to_i,
                            "walks",p["walks"].to_i,
                            "rbi",p["rbi"].to_i])}
        away_record.store("batting",batters)
        game_record.store("away_team_stats",away_record)
        #Process the inning records.
        inning_records = []
        g.xpath('/gamedata/playbyplay').children.each { |y|
          inning_record = {"number"=>y.xpath('./@num')[0].value}
          a_event_records = []
          y.xpath('./away').children.each {|z|
            a_event_records.push(Hash["player_id",z.xpath('./@playerid')[0].value,
                                      "pitcher_id",z.xpath('./@pitcherid')[0].value,
                                      "balls",z.xpath('./@balls')[0].value.to_i,
                                      "strikes",z.xpath('./@strikes')[0].value.to_i,
                                      "result",z.xpath('./@result')[0].value,
                                      "description",z.xpath('./@pbp')[0].value,
                                      "home_score",z.xpath('./score/@homescore')[0].value.to_i,
                                      "away_score",z.xpath('./score/@awayscore')[0].value.to_i])}
          h_event_records=[]
          y.xpath('./home').children.each {|z|
            h_event_records.push(Hash["player_id",z.xpath('./@playerid')[0].value,
                                      "pitcher_id",z.xpath('./@pitcherid')[0].value,
                                      "balls",z.xpath('./@balls')[0].value.to_i,
                                      "strikes",z.xpath('./@strikes')[0].value.to_i,
                                      "result",z.xpath('./@result')[0].value,
                                      "description",z.xpath('./@pbp')[0].value,
                                      "home_score",z.xpath('./score/@homescore')[0].value.to_i,
                                      "away_score",z.xpath('./score/@awayscore')[0].value.to_i])}
          inning_record.store("away_play_by_play",a_event_records)
          inning_record.store("home_play_by_play",h_event_records)
          inning_records.push(inning_record)
        }
        game_record.store("innings",inning_records)
        #Append the game_record to the file.
        $game_out.puts(game_record.to_json)
        #Finally, add the file to the log.
        $log_file.puts(File.basename(g_file))
      end  
    }
    season_record.store("regular_season_games",s_game_records)
    season_record.store("post_season_games",p_game_records)
    #We now have a complete season_record! Let's write it.
    $season_out.puts(season_record.to_json)
    #and write in the log that we finished this file.
    $log_file.puts(File.basename(s_file)) 
end


task :copy_icss do
  Dir["#{path_to(:hb_config)}/*icss.yaml"].each{ |icss|
    sh "cp #{icss} #{path_to(:fixd_dir)}"}
end

task :copy_endpoint do
  FileUtils.mkdir_p(File.join(path_to(:fixd_dir),"code"))
  Dir["#{path_to(:hb_engine)}/*endpoint.rb"].each{ |endpoint|
    sh "cp #{endpoint} #{File.join(path_to(:fixd_dir),"code")}"}
end

task :run => [:parse_team_files, :copy_icss, :copy_endpoint]

#If we've read in all of the files, we shouldn't need to do anything.
#But, if the user forgot to delete the log file, we should remind them.
puts "The log file contains #{$log.size} files, as many as the input directory. Remember to remove /log if you want to restart the hackbox." if $log.size==Dir[File.join($datasource,"*")].size

Rake::Task[:run].invoke unless $log.size==Dir[File.join($datasource,"*")].size

