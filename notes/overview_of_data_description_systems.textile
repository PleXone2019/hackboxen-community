
* Sensible best-effort conversion.
* Bidirectional in the simple case
* Error checking:
  - none (default)
  - conversion to out-of-band
  - conversion to nil
  - exception

* Overhead
  - minimal for simple types


---------------------------------------------------------------------------  
  
---------------------------------------------------------------------------  

h1. Types

h2. Primitive Types

Avro: byte, int, long, float, double, null, string, boolean


null:                          	no value
boolean:                       	a binary value
int:                           	32-bit signed integer
long:                          	64-bit signed integer
float:                         	single precision (32-bit) IEEE 754 floating-point number
double:                        	double precision (64-bit) IEEE 754 floating-point number
bytes:                         	sequence of 8-bit unsigned bytes
string:                        	unicode character sequence

* *Null* ..................... 	...

* *Integer*                    	64-bit integer
* *Bignum*                     	Arbitrary-length integer
* *Decimal*                    	Fixed-point number
* *Float*                      	Single-precision float: 0 & +/- 1.18e-38 to 3.4e+38
* *Double*                     	Double-precision float: 0 & 2.2e-308 to 1.8e+308.
* *String*                     	Arbitrary (short) string
* *Symbol*                     	Immutable flyweight string	
* *Blob*                       	Arbitrary-length string
* *Chunk*                       Fixed-length blob

A Chunk consists of:

* A long indicating the count of objects in this block.
* A long indicating the size in bytes of the serialized objects in the current block, after any codec is applied
* The serialized objects. If a codec is specified, this is compressed by that codec.
* The file's 16-byte sync marker.
Thus, each block's binary data can be efficiently extracted or skipped without deserializing the contents. The combination of block size, object counts, and sync markers enable detection of corrupt blocks and help ensure data integrity.

h4. Modifications

* *signed* / *unsigned*
* *size*: byte(8) tinyint(8) smallint(16) 32767 mediumint(24) 8388607 int(32)  4294967295 bigint(64) 18446744073709551615
* *serial*: BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE

h3. Date and Time types

* *Time*			
* *DateTime*			
* *Date*			
* *EpochTime*			A ruby Time object stored in the data-store as an Integer – the number of seconds since the UNIX epoch.
* *Year*
* *Duration*

h3. Enumerated Types

* *Enum*				
* *Boolean*				
* *EnumSet* (Flag)		An EnumSet (or Flag) is similar to an Enum, though the property that is created can hold multiple symbol values at once. This could be used for recording which colours a product can be ordered in, or what extra features an account has enabled. In MySQL, a SET can have a maximum of 64 different members (MySQL stores SET values numerically, with the low-order bit of the stored value corresponding to the first set member).
* *BitField*				

h3. Simple Semantic types

* *Slug*				
* *UnixFilePath*		Stored as a string in the data-store, FilePaths initialize Pathname objects, making it easy to perform various file operations on the file.
* *WindowsFilePath*				
* *Regex*			A ruby regex, stored as a string.
* *IPAddress*			Ruby IPAddr, stored as the string representation.
* *URI*				A ruby URI object, pre-parsed for use of methods such as #params or #uri, stored as a string in the data-store.
* *EmailAddress*				
* *MD5*				
* *SHA1*				
* *BCryptHash*			Stored in the data-store as string representing the salt, hash and cost of a password using OpenBSD’s bcrypt algorithm, it offers an alternative to the more usual pair of hash and salt columns.
* *UUID*				

* *Serial* ??				

h3. Decorated Blobs

* *GzipBlob*				
* *Bzip2Blob*				
* *LzoBlob*
* *DeflateBlob*                 The "deflate" codec writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the "zlib format" in RFC 1950) does not have a checksum.

* *PackBlob*				

h3. Compound Types

* *Record* (Hash / Map) 	String keys, fixed-type values
* *Array*			
* *Tuple*			An immutable fixed-length Array
* *Union*				
* *Error*
* *Schema*
* *Set*

* *Lng Lat* pair                decimal, HMS // signed, directional

name:    			a JSON string providing the name of the record (required).
namespace, a JSON string that qualifies the name;
doc:     			a JSON string providing documentation to the user of this schema (optional).
aliases:			a JSON array of strings, providing alternate names for this record (optional).
fields:   	    		a JSON array, listing fields (required). Each field is a JSON object with the following attributes:
  name:    			a JSON string providing the name of the field (required), and
  doc:    			a JSON string describing this field for users (optional).
  type:   			A JSON object defining a schema, or a JSON string naming a record definition (required).
  default:			A default value for this field, used when reading instances that lack this field (optional). Permitted values depend on the field's schema type, according to the table below. Default values for union fields correspond to the first schema in the union. Default values for bytes and fixed fields are JSON strings, where Unicode code points 0-255 are mapped to unsigned 8-bit byte values 0-255.
        field default values
        avro type	json type	example
        null		null	null
        boolean		boolean	true
        int,long	integer	1
        float,double	number	1.1
        bytes		string	"\u00FF"
        string	        string	"foo"   
        record	        object	{"a": 1}
        enum	        string	"FOO"   
        array	        array	[1]     
        map	        object	{"a": 1}
        fixed	        string	"\u00ff"
  order:   	specifies how this field impacts sort ordering of this record (optional). Valid values are "ascending" (the default), "descending", or "ignore". For more details on how this is used, see the the sort order section below.
  aliases: a JSON array of strings, providing alternate names for this field (optional).

h4. Unions

Unions, as mentioned above, are represented using JSON arrays. For example, ["string", "null"] declares a schema which may be either a string or null. Unions may not contain more than one schema with the same type, except for the named types record, fixed and enum. For example, unions containing two array types or two map types are not permitted, but two types with different names are permitted. (Names permit efficient resolution when reading and writing unions.) Unions may not immediately contain other unions.

A union is encoded by first writing a long value indicating the zero-based position within the union of the schema of its value. The value is then encoded per the indicated schema within the union.

For example, the union schema ["string","null"] would encode:

null as the integer 1 (the index of "null" in the union, encoded as hex 02):
02
the string "a" as zero (the index of "string" in the union), followed by the serialized string:
00 02 61

h4. Fixed

Fixed uses the type name "fixed" and supports two attributes:

name: a string naming this fixed (required).
namespace, a string that qualifies the name;
aliases: a JSON array of strings, providing alternate names for this enum (optional).
size: an integer, specifying the number of bytes per value (required).
For example, 16-byte quantity may be declared with:

{"type": "fixed", "size": 16, "name": "md5"}

h4. Data Binding

Objects serialize as hash or tuple but read in as properly-formed objects

h3. Serializers

These store values in the data-store using text based serialization formats. They work via calling dumping the object to the format on saving and parsing the text to reinitialize them on loading.

* *FixedWidthString*				
* *QuotedCsvList*				
* *SimpleTsvList*				
* *QuotedTsvList*				
* *SimpleTsvList*				
* *YamlString*				
* *JsonString*				
* *AvroBlob*				

* *Marshalled*				

* *ParseWithClass*				
* *ParseWithBlock*				
* *ParseWithRegex*				

* *Discriminator*		When DataMapper sees your type column declared as type Types::Discriminator, it will automatically insert the class name of the object you’ve created and later instantiate that row as that class. It also supports deep inheritance, so doing Woman.all will select all women, mothers, and daughters (and deeper inherited classes if they exist).

* Magic number

h3. Data Structures

* *List*

The model acts as an item on a list. It has a position, and there are methods defined for moving it up or down the list based on this position. The position can also be scoped, for example on a user id.

* *Tree*

* *Other*
  - trie, bloom filter,
  - State machine

h2. About Names

Names
Record, enums and fixed are named types. Each has a fullname that is composed of two parts; a name and a namespace. Equality of names is defined on the fullname.

The name portion of a fullname, and record field names must:

start with [A-Za-z_]
subsequently contain only [A-Za-z0-9_]
A namespace is a dot-separated sequence of such names.

In record, enum and fixed definitions, the fullname is determined in one of the following ways:

A name and namespace are both specified. For example, one might use "name": "X", "namespace": "org.foo" to indicate the fullname org.foo.X.
A fullname is specified. If the name specified contains a dot, then it is assumed to be a fullname, and any namespace also specified is ignored. For example, use "name": "org.foo.X" to indicate the fullname org.foo.X.
A name only is specified, i.e., a name that contains no dots. In this case the namespace is taken from the most tightly enclosing schema or protocol. For example, if "name": "X" is specified, and this occurs within a field of the record definition of org.foo.Y, then the fullname is org.foo.X.
References to previously defined names are as in the latter two cases above: if they contain a dot they are a fullname, if they do not contain a dot, the namespace is the namespace of the enclosing definition.

Primitive type names have no namespace and their names may not be defined in any namespace. A schema may only contain multiple definitions of a fullname if the definitions are equivalent.

h2. Documentation

YARD supplies the "following built-in tags:":http://rubydoc.info/docs/yard/file/docs/Tags.md#List_of_Available_Tags

* `@abstract`: Marks a class/module/method as abstract with optional implementor information.
* `@attr`: Declares an attribute from the docstring of a class. Meant to be used on Struct classes (classes that inherit Struct).
* `@attr_reader`: Declares a readonly attribute from the docstring of a class. Meant to be used on Struct classes (classes that inherit Struct). See `@attr`.
* `@attr_writer`: Declares a writeonly attribute from the docstring of class. Meant to be used on Struct classes (classes that inherit Struct). See `@attr`.
* `@author`: List the author(s) of a class/method
* `@deprecated`: Marks a method/class as deprecated with an optional reason.
* `@example`: Show an example snippet of code for an object. The first line is an optional title.
* `@option`: Describe an options hash in a method. The tag takes the name of the options parameter first, followed by optional types, the option key name, an optional default value for the key and a description of the option.
* `@overload`: Describe that your method can be used in various contexts with various parameters or return types. The first line should declare the new method signature, and the following indented tag data will be a new documentation string with its own tags adding metadata for such an overload.
* `@param`: Defines method parameters
* `@private`: Defines an object as private. This exists for classes, modules and constants that do not obey Ruby's visibility rules. For instance, an inner class might be considered "private", though Ruby would make no such distinction. By declaring the @private tag, the class can be hidden from documentation by using the `--no-private` command-line switch to yardoc (see {file:README.md}).
* `@raise`: Describes an Exception that a method may throw
* `@return`: Describes return value of method
* `@see`: "See Also" references for an object. Accepts URLs or other code objects with an optional description at the end.
* `@since`: Lists the version the feature/object was first added
* `@todo`: Marks a TODO note in the object being documented
* `@version`: Lists the version of a class, module or method
* `@yield`: Describes the block. Use types to list the parameter names the block yields.
* `@yieldparam`: Defines parameters yielded by a block
* `@yieldreturn`: Defines return type of a block

h2. Indexing

* Key (unique index)
  - think about key and index fields
* Index
* Unique
* Serial
* Composite Primary Key (CPK)
  - Want to remember order when defining CPK

h2. Optional

* Default
* Required
* Nullable / Not Null
* Serial (AutoIncrement)
* LazyLoading
* LazyLoading (as group)

h2. Constraints, Validations and Accessors

String constraints:
  max_length
  min_length
  allowed_chars
  regex

type:, required:, length, ... are called constraint and set of constraints are called rule.

required:               Value is required when true (default is false). This is similar to not-null constraint in RDBMS.
enum:                   List of available values.
pattern:                Specifies regular expression pattern of value.
range:                  Range of value between min and max
length:                 Range of length of value between max/max-ex and min/min-ex. Only type str and text are available with length:.
assert:                 String which represents validation expression. String should contain variable name val which repsents value. (This is an experimental function and not supported in Kwartz-java).
unique:                 Value is unique for mapping or sequence. This is similar to unique constraint of RDBMS. See the next subsection for detail.

When MySQL stores a value in a numeric column that is outside the permissible range of the column data type, the result depends on the SQL mode in effect at the time:

* If strict SQL mode is enabled, MySQL rejects the out-of-range value with an error, and the insert fails, in accordance with the SQL standard.
* If no restrictive modes are enabled, MySQL clips the value to the appropriate endpoint of the range and stores the resulting value instead. When an out-of-range value is assigned to an integer column, MySQL stores the value representing the corresponding endpoint of the column data type range. If you store 256 into a TINYINT or TINYINT UNSIGNED column, MySQL stores 127 or 255, respectively. When a floating-point or fixed-point column is assigned a value that exceeds the range implied by the specified (or default) precision and scale, MySQL stores the value representing the corresponding endpoint of that range.

Other Vendor Type     	MySQL Type
BOOL                 	TINYINT
BOOLEAN              	TINYINT
CHARACTER VARYING(M) 	VARCHAR(M)
FIXED                	DECIMAL
FLOAT4               	FLOAT
FLOAT8               	DOUBLE
INT1                 	TINYINT
INT2                 	SMALLINT
INT3                 	MEDIUMINT
INT4                 	INT
INT8                 	BIGINT
LONG VARBINARY       	MEDIUMBLOB
LONG VARCHAR         	MEDIUMTEXT
LONG                 	MEDIUMTEXT
MIDDLEINT            	MEDIUMINT
NUMERIC              	DECIMAL

h4. Duck Typing

* responds_to
* Enumerable

h4. Accessors

h4. Setter / Getter ; Public / Private

* ID fields shouldn't (?) be automatically set


h4. Association Constraints

 - :protect     returns false on destroy if there are child records
 - :destroy     deletes children if present
 - :destroy!    deletes children directly without instantiating the resource, bypassing any hooks. 
 - :set_nil     sets parent id to nil in child associations
 - :skip        Does nothing with children, results in orphaned records

Applicable constraints
 
 * 1:1 -- [:set_nil, :skip, :protect, :destroy]
 * 1:M -- [:set_nil, :skip, :protect, :destroy, :destroy!]
 * M:M -- [:skip, :protect, :destroy, :destroy!]

h2. Geospatial Types

* *Geohash*
* *Placename*

* *Well-Known Binary* (*WKB*)                   ("MySQL Reference":http://dev.mysql.com/doc/refman/5.0/en/gis-wkb-format.html)

The Well-Known Binary (WKB) representation for geometric values is defined by the OpenGIS specification. It is also defined in the ISO SQL/MM Part 3: Spatial standard.

WKB is used to exchange geometry data as binary streams represented by BLOB values containing geometric WKB information.

WKB uses one-byte unsigned integers, four-byte unsigned integers, and eight-byte double-precision numbers (IEEE 754 format). A byte is eight bits.

For example, a WKB value that corresponds to POINT(1 1) consists of this sequence of 21 bytes (each represented here by two hex digits):

        0101000000000000000000F03F000000000000F03F
        
The sequence may be broken down into these components:

        Byte order : 01
        WKB type   : 01000000
        X          : 000000000000F03F
        Y          : 000000000000F03F

Component representation is as follows:

* The byte order may be either 1 or 0 to indicate little-endian or big-endian storage. The little-endian and big-endian byte orders are also known as Network Data Representation (NDR) and External Data Representation (XDR), respectively.
* The WKB type is a code that indicates the geometry type. Values from 1 through 7 indicate Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection.
* A Point value has X and Y coordinates, each represented as a double-precision value.

* *hcard*                       (see section on Microformats)


h2. Microformats

* *hcard* / *vcard*
* *vevent*
* *bibliography* / *authorship* reference

h4. Media types

* *MIME type*
* 


 
h2. Global (Ordering / Comparison / Aggregation)

h4. Ordering and Comparison

For example, to specify the sort order of a field within a record, one may use     the @order annotation before the field name as follows:
  record MyRecord {
    string @order("ascending") myAscendingSortField;
    string @order("descending") myDescendingField;
    string @order("ignore") myIgnoredField;
  }

Sort Order
Avro defines a standard sort order for data. This permits data written by one system to be efficiently sorted by another system. This can be an important optimization, as sort order comparisons are sometimes the most frequent per-object operation. Note also that Avro binary-encoded data can be efficiently ordered without deserializing it to objects.

Data items may only be compared if they have identical schemas. Pairwise comparisons are implemented recursively with a depth-first, left-to-right traversal of the schema. The first mismatch encountered determines the order of the items.

Two items with the same schema are compared according to the following rules.

null data is always equal.
boolean data is ordered with false before true.
int, long, float and double data is ordered by ascending numeric value.
bytes and fixed data are compared lexicographically by unsigned 8-bit values.
string data is compared lexicographically by Unicode code point. Note that since UTF-8 is used as the binary encoding for strings, sorting of bytes and string binary data is identical.
array data is compared lexicographically by element.
enum data is ordered by the symbol's position in the enum schema. For example, an enum whose symbols are ["z", "a"] would sort "z" values before "a" values.
union data is first ordered by the branch within the union, and, within that, by the type of the branch. For example, an ["int", "string"] union would order all int values before all string values, with the ints and strings themselves ordered as defined above.
record data is ordered lexicographically by field. If a field specifies that its order is:
"ascending", then the order of its values is unaltered.
"descending", then the order of its values is reversed.
"ignore", then its values are ignored when sorting.
map data may not be compared. It is an error to attempt to compare data containing maps unless those maps are in an "order":"ignore" record field.
  

h4. Increment and adjustment

h4. Accumulate

h4. Aggregates 

This provides methods for database calls to aggregate functions such as count, sum, avg, max and min. These aggregate functions are added to both collections and Models. "dm-aggregates":http://datamapper.org/docs/dm_more/dm-aggregates

h2. Other decorations

h3. Semantic typetype

h4. Freebase type

h3. Annotations

* A field's type may also be preceded by annotations, e.g.:

  record MyRecord { @java-class("java.util.ArrayList") array string myStrings; }

h2. Aliases


Named types and fields may have aliases. An implementation may optionally use aliases to map a writer's schema to the reader's. This faciliates both schema evolution as well as processing disparate datasets.

Aliases function by re-writing the writer's schema using aliases from the reader's schema. For example, if the writer's schema was named "Foo" and the reader's schema is named "Bar" and has an alias of "Foo", then the implementation would act as though "Foo" were named "Bar" when reading. Similarly, if data was written as a record with a field named "x" and is read as a record with a field named "y" with alias "x", then the implementation would act as though "x" were named "y" when reading.

A type alias may be specified either as a fully namespace-qualified, or relative to the namespace of the name it is an alias for. For example, if a type named "a.b" has aliases of "c" and "x.y", then the fully qualified names of its aliases are "a.c" and "x.y".

* Aliases may be specified with the @aliases annotation:

  @aliases(["org.old.OldRecord", "org.ancient.AncientRecord"])
  record MyRecord { string @aliases(["oldField", "ancientField"]) myNewField; }
  
h2. @namespace

A @namespace annotation may be used to modify the namespace when defining
a named schema. For example:

  @namespace("org.apache.avro.firstNamespace")
  protocol MyProto {
    @namespace("org.apache.avro.someOtherNamespace")
    record Foo {}
    record Bar {}
  }
  
will define a protocol in the firstNamespace namespace. The record Foo will be
defined in someOtherNamespace as it inherits its default from its container.

h2. Associations

ActiveRecord Terminology                  	DataMapper Terminology
------------------------                   	----------------------
has_many                                	has n                               
has_one                                 	has 1                               
belongs_to                               	belongs_to                          
has_and_belongs_to_many                 	has n, :things, :through => Resource
has_many :association, :through => Model	has n, :things, :through => :model

h4. Conditions/Validations/Finders on associations

h2. Hooks

h4. Timestamps

See under Versioning

h4. Hooks

* before :save, :categorize ; def categorize() ... ; end
* before :save do ... code here ... ; end
* before_class_method :find, :prepare
* In order to abort advice and prevent the advised method from being called, throw :halt -- before :destroy do |post| throw :halt ;  end
  Remember, if you throw :halt inside an after advice, the advised method will have already ran and returned. Because of this, the after advice will be the only thing halted.

h2. Versioning

h4. timestamps

* created_at / created_on
* updated_at / updated_on

h4. Serial version

h4. Hash version

h4. Diffs

h2. Serializers

h3. Encoding

h4. Unicode

* utf8 and all that

h4. Pack

h4.  

h3. Schema

* to_avro
* to_sql
* to_pig
* to_datamapper
* to_struct

h3. Data

* to_avro
* to_xml
* to_json
* to_yaml
* 

h2. Questions

* An MD5 -- hex, string, biginteger?


---------------------------------------------------------------------------

h2. Writing Your Own Datamapper Type

Writing your own custom type isn’t difficult. There are two (or perhaps three) methods to implement, as well as the selection of an appropriate primitive. All types are a class which should descend from DataMapper::Property::Object.

h5. The Primitive

DataMapper offers several choices for a data-store primitive: Boolean, Class, Date, DateTime, BigDecimal, Float, Integer, Float, String, Object, or Time. To assign a primitive to a type, either make the type descend from DataMapper::Property::(PrimitiveClass) or within the class definition, use primitive PrimitiveClass.

h5. dump

A type’s dump(value) method is called when the object is saved to the data-store. It is responsible for mapping whatever is assigned to the property on to the primitive type. For example, the EpochTime Type saves an integer directly to the data-store, or calls #to_i if a Time object is passed to it.

h5. load

The load(value) method is called when the property is retrieved from the data-store. It takes the primitive value and initializes a ruby object from it. For example, the Json type performs JSON.parse(value) to convert the json string back into appropriate ruby.

h5. typecast_to_primitive

Typecasting is provided by the types typecast_to_primitive(value) method, which tries to coerce whatever value the property has into an appropriate type. A type doesn’t have to provide a typecast but it can be useful, for example to allow the string ‘2008-09-06’ to be converted to a ruby Date without having to reload the model.

h5. Examples

For examples of the types, the best place to look is "dm-types on github":http://github.com/datamapper/dm-types

h1. References

* "Datamapper":http://datamapper.org/docs/properties

* "Kwalify":http://www.kuwata-lab.com/kwalify/ruby/users-guide.01.html#schema

* "MySQL":http://dev.mysql.com/doc/refman/5.0/en/gis-wkb-format.html

* "YARD (Yay! A Ruby Documentation Tool)":http://yardoc.org/

* "How to Write Doc Comments for the Javadoc Tool":http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html
* "Javadoc Tags":http://download.oracle.com/javase/1.5.0/docs/tooldocs/solaris/javadoc.html#javadoctags
